pipeline {
    agent any
    // agent {
    //     kubernetes {
    //         label 'docker-agent'
    //         defaultContainer 'jnlp'
    //         yaml """
    //         apiVersion: v1
    //         kind: Pod
    //         spec:
    //           containers:
    //             - name: jnlp
    //               image: jenkins/inbound-agent:latest
    //               args: ['\$(JENKINS_SECRET)', '\$(JENKINS_AGENT_NAME)']
    //             - name: docker
    //               image: docker:19.03.12
    //               command:
    //                 - 'sleep'
    //                 - 'infinity'
    //               volumeMounts:
    //                 - mountPath: /var/run/docker.sock
    //                   name: docker-socket
    //         volumes:
    //           - name: docker-socket
    //             hostPath:
    //               path: /var/run/docker.sock
    //       """
    //     }
    // }

    environment {
        DOCKER_IMAGE = 'helloworld-spring-boot'
        DOCKER_REGISTRY = 'dharun05'
    }

    stages {
        stage('Clone') {
            steps {
                checkout scm
            }
        }

        stage('Docker Build') {
            steps {
                script {
                    // Build the Docker image
                    def imageName = "${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BRANCH_NAME}"
                    sh "docker build -t ${imageName} ."
                }
            }
        }

        stage('Push to Registry') {
            steps {
                script {
                    echo "Pushing Docker image to Docker Registry"
                    withCredentials([string(credentialsId: 'docker_registry_token', variable: 'TOKEN')]) {
                        sh '''
                            docker login -u dharun05 -p "$TOKEN"
                        '''
                    }

                    // Push the Docker image to the registry
                    def imageName = "${DOCKER_REGISTRY}/${DOCKER_IMAGE}:${BRANCH_NAME}"
                    sh "docker push ${imageName}"
                }
            }
        }
    }

    post {
        always {
            cleanWs()  // Clean the workspace after the build
        }
    }
}
